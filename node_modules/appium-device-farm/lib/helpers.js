"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stripAppiumPrefixes = exports.isPortBusy = exports.hubUrl = exports.getFreePort = exports.checkIfPathIsAbsolute = exports.isMac = exports.asyncForEach = void 0;
/* eslint-disable no-prototype-builtins */
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const tcp_port_used_1 = __importDefault(require("tcp-port-used"));
const get_port_1 = __importDefault(require("get-port"));
const lodash_1 = __importDefault(require("lodash"));
const logger_1 = __importDefault(require("./logger"));
const Cloud_1 = __importDefault(require("./enums/Cloud"));
const normalize_url_1 = __importDefault(require("normalize-url"));
const APPIUM_VENDOR_PREFIX = 'appium:';
function asyncForEach(array, callback) {
    return __awaiter(this, void 0, void 0, function* () {
        for (let index = 0; index < array.length; index++) {
            yield callback(array[index], index, array);
        }
    });
}
exports.asyncForEach = asyncForEach;
function isMac() {
    return os_1.default.type() === 'Darwin';
}
exports.isMac = isMac;
function checkIfPathIsAbsolute(configPath) {
    return path_1.default.isAbsolute(configPath);
}
exports.checkIfPathIsAbsolute = checkIfPathIsAbsolute;
function getFreePort() {
    return __awaiter(this, void 0, void 0, function* () {
        return yield (0, get_port_1.default)();
    });
}
exports.getFreePort = getFreePort;
function hubUrl(device) {
    const host = (0, normalize_url_1.default)(device.host, { removeTrailingSlash: false });
    if (device.hasOwnProperty('cloud') && device.cloud.toLowerCase() === Cloud_1.default.BROWSERSTACK) {
        return `https://${process.env.BS_USERNAME}:${process.env.BS_PASSWORD}@hub.browserstack.com/wd/hub/session`;
    }
    else if (device.hasOwnProperty('cloud') && device.cloud.toLowerCase() === Cloud_1.default.SAUCELABS) {
        return `https://${process.env.SAUCE_USERNAME}:${process.env.SAUCE_PASSWORD}@${new URL(device.host).host}/wd/hub/session`;
    }
    else if (device.hasOwnProperty('cloud') && device.cloud.toLowerCase() === Cloud_1.default.LAMBDATEST) {
        return `https://${process.env.LT_USERNAME}:${process.env.LT_PASSWORD}@${new URL(device.host).host}/wd/hub/session`;
    }
    else if (device.hasOwnProperty('cloud') && device.cloud.toLowerCase() === Cloud_1.default.PCLOUDY) {
        return `${host}/session`;
    }
    return `${host}/wd/hub/session`;
}
exports.hubUrl = hubUrl;
function isPortBusy(port) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (!port) {
                return false;
            }
            return yield tcp_port_used_1.default.check(port);
        }
        catch (err) {
            return false;
        }
    });
}
exports.isPortBusy = isPortBusy;
// Standard, non-prefixed capabilities (see https://www.w3.org/TR/webdriver/#dfn-table-of-standard-capabilities)
const STANDARD_CAPS = [
    'browserName',
    'browserVersion',
    'platformName',
    'acceptInsecureCerts',
    'pageLoadStrategy',
    'proxy',
    'setWindowRect',
    'timeouts',
    'unhandledPromptBehavior',
];
function isStandardCap(cap) {
    return !!lodash_1.default.find(STANDARD_CAPS, (standardCap) => standardCap.toLowerCase() === `${cap}`.toLowerCase());
}
// If the 'appium:' prefix was provided and it's a valid capability, strip out the prefix (see https://www.w3.org/TR/webdriver/#dfn-extension-capabilities)
// (NOTE: Method is destructive and mutates contents of caps)
function stripAppiumPrefixes(caps) {
    // split into prefixed and non-prefixed.
    // non-prefixed should be standard caps at this point
    const [prefixedCaps, nonPrefixedCaps] = lodash_1.default.partition(lodash_1.default.keys(caps), (cap) => String(cap).startsWith(APPIUM_VENDOR_PREFIX));
    // initialize this with the k/v pairs of the non-prefixed caps
    const strippedCaps = /** @type {import('@appium/types').Capabilities<C>} */ lodash_1.default.pick(caps, nonPrefixedCaps);
    const badPrefixedCaps = [];
    // Strip out the 'appium:' prefix
    for (const prefixedCap of prefixedCaps) {
        const strippedCapName = 
        /** @type {import('type-fest').StringKeyOf<import('@appium/types').Capabilities<C>>} */ prefixedCap.substring(APPIUM_VENDOR_PREFIX.length);
        // If it's standard capability that was prefixed, add it to an array of incorrectly prefixed capabilities
        if (isStandardCap(strippedCapName)) {
            badPrefixedCaps.push(strippedCapName);
            if (lodash_1.default.isNil(strippedCaps[strippedCapName])) {
                strippedCaps[strippedCapName] = caps[prefixedCap];
            }
            else {
                logger_1.default.warn(`Ignoring capability '${prefixedCap}=${caps[prefixedCap]}' and ` +
                    `using capability '${strippedCapName}=${strippedCaps[strippedCapName]}'`);
            }
        }
        else {
            strippedCaps[strippedCapName] = caps[prefixedCap];
        }
    }
    // If we found standard caps that were incorrectly prefixed, throw an exception (e.g.: don't accept 'appium:platformName', only accept just 'platformName')
    if (badPrefixedCaps.length > 0) {
        logger_1.default.warn(`The capabilities ${JSON.stringify(badPrefixedCaps)} are standard capabilities and do not require "appium:" prefix`);
    }
    return strippedCaps;
}
exports.stripAppiumPrefixes = stripAppiumPrefixes;
