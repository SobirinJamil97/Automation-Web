"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SimulatorXcode6 = exports.SPRINGBOARD_BUNDLE_ID = exports.BOOT_COMPLETED_EVENT = void 0;
require("source-map-support/register");
var _path = _interopRequireDefault(require("path"));
var _appiumXcode = _interopRequireWildcard(require("appium-xcode"));
var _logger = _interopRequireDefault(require("./logger"));
var _support = require("@appium/support");
var _bluebird = _interopRequireDefault(require("bluebird"));
var _lodash = _interopRequireDefault(require("lodash"));
var _asyncLock = _interopRequireDefault(require("async-lock"));
var _utils = require("./utils.js");
var _asyncbox = require("asyncbox");
var settings = _interopRequireWildcard(require("./settings"));
var _teen_process = require("teen_process");
var _tailUntil = require("./tail-until.js");
var _index = _interopRequireDefault(require("./extensions/index"));
var _events = require("events");
var _calendar = _interopRequireDefault(require("./calendar"));
var _permissions = _interopRequireDefault(require("./permissions"));
var _nodeSimctl = _interopRequireDefault(require("node-simctl"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const STARTUP_TIMEOUT = 60 * 1000;
const EXTRA_STARTUP_TIME = 2000;
const UI_CLIENT_ACCESS_GUARD = new _asyncLock.default();
const UI_CLIENT_BUNDLE_ID = 'com.apple.iphonesimulator';
const SPRINGBOARD_BUNDLE_ID = 'com.apple.SpringBoard';
exports.SPRINGBOARD_BUNDLE_ID = SPRINGBOARD_BUNDLE_ID;
const BOOT_COMPLETED_EVENT = 'bootCompleted';
exports.BOOT_COMPLETED_EVENT = BOOT_COMPLETED_EVENT;
class SimulatorXcode6 extends _events.EventEmitter {
  constructor(udid, xcodeVersion) {
    super();
    this.udid = String(udid);
    this.simctl = new _nodeSimctl.default({
      udid: this.udid
    });
    this.xcodeVersion = xcodeVersion;
    this._platformVersion = null;
    this.keychainPath = _path.default.resolve(this.getDir(), 'Library', 'Keychains');
    this.simulatorApp = 'iOS Simulator.app';
    this.appDataBundlePaths = {};
    this.isFreshFiles = ['Library/ConfigurationProfiles', 'Library/Cookies', 'Library/Preferences/.GlobalPreferences.plist', 'Library/Preferences/com.apple.springboard.plist', 'var/run/syslog.pid'];
    this.extraStartupTime = EXTRA_STARTUP_TIME;
    this.calendar = new _calendar.default(xcodeVersion, this.getDir());
    this.permissions = new _permissions.default(xcodeVersion, this.getDir(), this.udid);
  }
  get uiClientBundleId() {
    return UI_CLIENT_BUNDLE_ID;
  }
  get devicesSetPath() {
    return this.simctl.devicesSetPath;
  }
  set devicesSetPath(value) {
    this.simctl.devicesSetPath = value;
  }
  async getUIClientPid() {
    let stdout;
    try {
      ({
        stdout
      } = await (0, _teen_process.exec)('pgrep', ['-fn', `${this.simulatorApp}/Contents/MacOS/`]));
    } catch (e) {
      return null;
    }
    if (isNaN(parseInt(stdout, 10))) {
      return null;
    }
    stdout = stdout.trim();
    _logger.default.debug(`Got Simulator UI client PID: ${stdout}`);
    return stdout;
  }
  async isUIClientRunning() {
    return !_lodash.default.isNull(await this.getUIClientPid());
  }
  get startupTimeout() {
    return STARTUP_TIMEOUT;
  }
  async getPlatformVersion() {
    if (!this._platformVersion) {
      let {
        sdk
      } = await this.stat();
      this._platformVersion = sdk;
    }
    return this._platformVersion;
  }
  getRootDir() {
    let home = process.env.HOME;
    return _path.default.resolve(home, 'Library', 'Developer', 'CoreSimulator', 'Devices');
  }
  getDir() {
    return _path.default.resolve(this.getRootDir(), this.udid, 'data');
  }
  getLogDir() {
    let home = process.env.HOME;
    return _path.default.resolve(home, 'Library', 'Logs', 'CoreSimulator', this.udid);
  }
  async installApp(app) {
    return await this.simctl.installApp(app);
  }
  async isAppInstalled(bundleId, appFile = null) {
    let appDirs = await this.getAppDirs(appFile, bundleId);
    return appDirs.length !== 0;
  }
  async getUserInstalledBundleIdsByBundleName(bundleName) {
    const rootUserAppDir = await this.buildBundlePathMap('Bundle');
    const bundleIds = [];
    if (_lodash.default.isEmpty(rootUserAppDir)) {
      return bundleIds;
    }
    for (const [bundleId, userAppDirPath] of Object.entries(rootUserAppDir)) {
      const appFile = (await _support.fs.readdir(userAppDirPath)).find(file => _path.default.extname(file).toLowerCase() === '.app');
      const infoPlistPath = _path.default.resolve(userAppDirPath, appFile, 'Info.plist');
      if (!(await _support.fs.exists(infoPlistPath))) {
        continue;
      }
      try {
        const infoPlist = await _support.plist.parsePlistFile(infoPlistPath, false);
        if (infoPlist.CFBundleName === bundleName) {
          bundleIds.push(bundleId);
        }
      } catch (err) {
        _logger.default.warn(`Failed to read plist ${infoPlistPath}. Original error '${err.message}'`);
        continue;
      }
    }
    _logger.default.debug(`The simulator has '${bundleIds.length}' bundles which have '${bundleName}' as their 'CFBundleName':`);
    for (const bundleId of bundleIds) {
      _logger.default.debug(`    '${bundleId}'`);
    }
    return bundleIds;
  }
  async getAppDir(id, subDir = 'Data') {
    this.appDataBundlePaths[subDir] = this.appDataBundlePaths[subDir] || {};
    if (_lodash.default.isEmpty(this.appDataBundlePaths[subDir]) && !(await this.isFresh())) {
      this.appDataBundlePaths[subDir] = await this.buildBundlePathMap(subDir);
    }
    return this.appDataBundlePaths[subDir][id];
  }
  async buildBundlePathMap(subDir = 'Data') {
    _logger.default.debug('Building bundle path map');
    let applicationList;
    let pathBundlePair;
    if ((await this.getPlatformVersion()) === '7.1') {
      applicationList = _path.default.resolve(this.getDir(), 'Applications');
      pathBundlePair = async dir => {
        dir = _path.default.resolve(applicationList, dir);
        let appFiles = await _support.fs.glob(`${dir}/*.app`);
        let bundleId = appFiles[0].match(/.*\/(.*)\.app/)[1];
        return {
          path: dir,
          bundleId
        };
      };
    } else {
      applicationList = _path.default.resolve(this.getDir(), 'Containers', subDir, 'Application');
      let readBundleId = async dir => {
        let plist = _path.default.resolve(dir, '.com.apple.mobile_container_manager.metadata.plist');
        let metadata = await settings.read(plist);
        return metadata.MCMMetadataIdentifier;
      };
      pathBundlePair = async dir => {
        dir = _path.default.resolve(applicationList, dir);
        let bundleId = await readBundleId(dir);
        return {
          path: dir,
          bundleId
        };
      };
    }
    if (!(await _support.fs.exists(applicationList))) {
      _logger.default.warn(`No directory path '${applicationList}'`);
      return {};
    }
    let bundlePathDirs = await _support.fs.readdir(applicationList);
    let bundlePathPairs = await (0, _asyncbox.asyncmap)(bundlePathDirs, async function (dir) {
      return await pathBundlePair(dir);
    }, false);
    return bundlePathPairs.reduce((bundleMap, bundlePath) => {
      bundleMap[bundlePath.bundleId] = bundlePath.path;
      return bundleMap;
    }, {});
  }
  async stat() {
    for (let [sdk, deviceArr] of _lodash.default.toPairs(await this.simctl.getDevices())) {
      for (let device of deviceArr) {
        if (device.udid === this.udid) {
          device.sdk = sdk;
          return device;
        }
      }
    }
    return {};
  }
  async isFresh() {
    let files = this.isFreshFiles;
    let pv = await this.getPlatformVersion();
    if (pv !== '7.1') {
      files.push('Library/Preferences/com.apple.Preferences.plist');
    } else {
      files.push('Applications');
    }
    const dir = this.getDir();
    files = files.map(s => _path.default.resolve(dir, s));
    const existences = await (0, _asyncbox.asyncmap)(files, async f => await _support.fs.hasAccess(f));
    const fresh = _lodash.default.compact(existences).length !== files.length;
    _logger.default.debug(`Checking whether simulator has been run before: ${fresh ? 'no' : 'yes'}`);
    return fresh;
  }
  async isRunning() {
    try {
      await this.simctl.getEnv('dummy');
      return true;
    } catch (e) {
      return false;
    }
  }
  async isShutdown() {
    try {
      await this.simctl.getEnv('dummy');
      return false;
    } catch (e) {
      return _lodash.default.includes(e.stderr, 'Current state: Shutdown');
    }
  }
  async waitForBoot(startupTimeout) {
    let bootedIndicator = await this.getBootedIndicatorString();
    await this.tailLogsUntil(bootedIndicator, startupTimeout);
    _logger.default.debug(`Waiting an extra ${this.extraStartupTime}ms for the simulator to really finish booting`);
    await _bluebird.default.delay(this.extraStartupTime);
    _logger.default.debug('Done waiting extra time for simulator');
    this.emit(BOOT_COMPLETED_EVENT);
  }
  async getBootedIndicatorString() {
    let indicator;
    let platformVersion = await this.getPlatformVersion();
    switch (platformVersion) {
      case '7.1':
      case '8.1':
      case '8.2':
      case '8.3':
      case '8.4':
        indicator = 'profiled: Service starting...';
        break;
      case '9.0':
      case '9.1':
      case '9.2':
      case '9.3':
        indicator = 'System app "com.apple.springboard" finished startup';
        break;
      case '10.0':
        indicator = 'Switching to keyboard';
        break;
      default:
        _logger.default.warn(`No boot indicator case for platform version '${platformVersion}'`);
        indicator = 'no boot indicator string available';
    }
    return indicator;
  }
  async startUIClient(opts = {}) {
    opts = _lodash.default.cloneDeep(opts);
    _lodash.default.defaultsDeep(opts, {
      scaleFactor: null,
      startupTimeout: this.startupTimeout
    });
    const simulatorApp = _path.default.resolve(await (0, _appiumXcode.getPath)(), 'Applications', this.simulatorApp);
    const args = ['-Fn', simulatorApp, '--args', '-CurrentDeviceUDID', this.udid];
    if (opts.scaleFactor) {
      const {
        name
      } = await this.stat();
      const formattedDeviceName = name.replace(/\s+/g, '-');
      const argumentName = `-SimulatorWindowLastScale-com.apple.CoreSimulator.SimDeviceType.${formattedDeviceName}`;
      args.push(argumentName, opts.scaleFactor);
    }
    _logger.default.info(`Starting Simulator UI with command: open ${args.join(' ')}`);
    try {
      await (0, _teen_process.exec)('open', args, {
        timeout: opts.startupTimeout
      });
    } catch (err) {
      if (!(err.stdout || '').includes('-10825') && !(err.stderr || '').includes('-10825')) {
        throw err;
      }
      _logger.default.warn(`Error while opening UI: ${err.stdout || err.stderr}. Continuing`);
    }
  }
  async run(opts = {}) {
    opts = Object.assign({
      startupTimeout: this.startupTimeout
    }, opts);
    const isServerRunning = await this.isRunning();
    const isUIClientRunning = await this.isUIClientRunning();
    if (isServerRunning && isUIClientRunning) {
      _logger.default.info(`Both Simulator with UDID ${this.udid} and the UI client are currently running`);
      return;
    }
    const timer = new _support.timing.Timer().start();
    try {
      await this.shutdown();
    } catch (err) {
      _logger.default.warn(`Error on Simulator shutdown: ${err.message}`);
    }
    await this.startUIClient(opts);
    await this.waitForBoot(opts.startupTimeout);
    _logger.default.info(`Simulator with UDID ${this.udid} booted in ${timer.getDuration().asSeconds.toFixed(3)}s`);
  }
  async clean() {
    await this.endSimulatorDaemon();
    _logger.default.info(`Cleaning simulator ${this.udid}`);
    await this.simctl.eraseDevice(10000);
  }
  async scrubCustomApp(appFile, appBundleId) {
    return await this.cleanCustomApp(appFile, appBundleId, true);
  }
  async cleanCustomApp(appFile, appBundleId, scrub = false) {
    _logger.default.debug(`Cleaning app data files for '${appFile}', '${appBundleId}'`);
    if (!scrub) {
      _logger.default.debug(`Deleting app altogether`);
    }
    let appDirs = await this.getAppDirs(appFile, appBundleId, scrub);
    if (appDirs.length === 0) {
      _logger.default.debug('Could not find app directories to delete. It is probably not installed');
      return;
    }
    let deletePromises = [];
    for (let dir of appDirs) {
      _logger.default.debug(`Deleting directory: '${dir}'`);
      deletePromises.push(_support.fs.rimraf(dir));
    }
    if ((await this.getPlatformVersion()) >= 8) {
      let relRmPath = `Library/Preferences/${appBundleId}.plist`;
      let rmPath = _path.default.resolve(this.getRootDir(), relRmPath);
      _logger.default.debug(`Deleting file: '${rmPath}'`);
      deletePromises.push(_support.fs.rimraf(rmPath));
    }
    await _bluebird.default.all(deletePromises);
  }
  async getAppDirs(appFile, appBundleId, scrub = false) {
    let dirs = [];
    if ((await this.getPlatformVersion()) >= 8) {
      let data = await this.getAppDir(appBundleId);
      if (!data) return dirs;
      let bundle = !scrub ? await this.getAppDir(appBundleId, 'Bundle') : undefined;
      for (let src of [data, bundle]) {
        if (src) {
          dirs.push(src);
        }
      }
    } else {
      let data = await this.getAppDir(appFile);
      if (data) {
        dirs.push(data);
      }
    }
    return dirs;
  }
  async launchAndQuit(safari = false, startupTimeout = this.startupTimeout) {
    _logger.default.debug('Attempting to launch and quit the simulator to create the directory structure');
    await this.run({
      startupTimeout
    });
    if (safari) {
      _logger.default.debug('Spawning Safari browser in order to create the necessary file system items');
      await (0, _utils.launchApp)(this.simctl, _utils.MOBILE_SAFARI_BUNDLE_ID);
    }
    try {
      await (0, _asyncbox.retryInterval)(60, 250, async () => {
        if (await this.isFresh()) {
          throw new Error('Simulator files not fully created. Waiting a bit');
        }
      });
    } catch (err) {
      _logger.default.warn(`Timeout waiting for simulator files to be created. Continuing`);
    }
    await this.shutdown();
  }
  async endSimulatorDaemon() {
    _logger.default.debug(`Killing any simulator daemons for ${this.udid}`);
    let launchctlCmd = `launchctl list | grep ${this.udid} | cut -f 3 | xargs -n 1 launchctl`;
    try {
      let stopCmd = `${launchctlCmd} stop`;
      await (0, _teen_process.exec)('bash', ['-c', stopCmd]);
    } catch (err) {
      _logger.default.warn(`Could not stop simulator daemons: ${err.message}`);
      _logger.default.debug('Carrying on anyway!');
    }
    try {
      let removeCmd = `${launchctlCmd} remove`;
      await (0, _teen_process.exec)('bash', ['-c', removeCmd]);
    } catch (err) {
      _logger.default.warn(`Could not remove simulator daemons: ${err.message}`);
      _logger.default.debug('Carrying on anyway!');
    }
    try {
      await (0, _asyncbox.waitForCondition)(async () => {
        let {
          stdout
        } = await (0, _teen_process.exec)('bash', ['-c', `ps -e  | grep ${this.udid} | grep launchd_sim | grep -v bash | grep -v grep | awk {'print$1'}`]);
        return stdout.trim().length === 0;
      }, {
        waitMs: 10000,
        intervalMs: 500
      });
    } catch (err) {
      _logger.default.warn(`Could not end simulator daemon for ${this.udid}: ${err.message}`);
      _logger.default.debug('Carrying on anyway!');
    }
  }
  async shutdown(opts = {}) {
    if (await this.isShutdown()) {
      return;
    }
    await (0, _asyncbox.retryInterval)(5, 500, this.simctl.shutdownDevice.bind(this.simctl));
    const waitMs = parseInt(opts.timeout, 10);
    if (waitMs > 0) {
      try {
        await (0, _asyncbox.waitForCondition)(async () => await this.isShutdown(), {
          waitMs,
          intervalMs: 100
        });
      } catch (err) {
        throw new Error(`Simulator is not in 'Shutdown' state after ${waitMs}ms`);
      }
    }
  }
  async delete() {
    await this.simctl.deleteDevice();
  }
  async updateSettings(plist, updates) {
    return await settings.updateSettings(this, plist, updates);
  }
  async updateLocationSettings(bundleId, authorized) {
    return await settings.updateLocationSettings(this, bundleId, authorized);
  }
  async setReduceMotion(reduceMotion = true) {
    if (await this.isFresh()) {
      await this.launchAndQuit(false, STARTUP_TIMEOUT);
    }
    await settings.setReduceMotion(this, reduceMotion);
  }
  async setAppearance() {
    throw new Error(`Xcode SDK '${this.xcodeVersion}' is too old to set UI appearance`);
  }
  async getAppearance() {
    throw new Error(`Xcode SDK '${this.xcodeVersion}' is too old to get UI appearance`);
  }
  async updateSafariSettings(updates) {
    let updated = await settings.updateSafariUserSettings(this, updates);
    return (await settings.updateSettings(this, 'mobileSafari', updates)) || updated;
  }
  async updateSafariGlobalSettings(updates) {
    return await settings.updateSafariGlobalSettings(this, updates);
  }
  async updateLocale(language, locale, calendarFormat) {
    return await settings.updateLocale(this, language, locale, calendarFormat);
  }
  async deleteSafari() {
    _logger.default.debug('Deleting Safari apps from simulator');
    let dirs = [];
    dirs.push(await this.getAppDir(_utils.MOBILE_SAFARI_BUNDLE_ID));
    let pv = await this.getPlatformVersion();
    if (pv >= 8) {
      dirs.push(await this.getAppDir(_utils.MOBILE_SAFARI_BUNDLE_ID, 'Bundle'));
    }
    let deletePromises = [];
    for (let dir of _lodash.default.compact(dirs)) {
      _logger.default.debug(`Deleting directory: '${dir}'`);
      deletePromises.push(_support.fs.rimraf(dir));
    }
    await _bluebird.default.all(deletePromises);
  }
  async cleanSafari(keepPrefs = true) {
    _logger.default.debug('Cleaning mobile safari data files');
    if (await this.isFresh()) {
      _logger.default.info('Could not find Safari support directories to clean out old ' + 'data. Probably there is nothing to clean out');
      return;
    }
    let libraryDir = _path.default.resolve(this.getDir(), 'Library');
    let safariRoot = await this.getAppDir(_utils.MOBILE_SAFARI_BUNDLE_ID);
    if (!safariRoot) {
      _logger.default.info('Could not find Safari support directories to clean out old ' + 'data. Probably there is nothing to clean out');
      return;
    }
    let safariLibraryDir = _path.default.resolve(safariRoot, 'Library');
    let filesToDelete = [`Caches/Snapshots/${_utils.MOBILE_SAFARI_BUNDLE_ID}`, `Caches/${_utils.MOBILE_SAFARI_BUNDLE_ID}/*`, 'Caches/com.apple.WebAppCache/*', 'Caches/com.apple.WebKit.Networking/*', 'Caches/com.apple.WebKit.WebContent/*', 'Image Cache/*', `WebKit/${_utils.MOBILE_SAFARI_BUNDLE_ID}/*`, 'WebKit/GeolocationSites.plist', 'WebKit/LocalStorage/*.*', 'Safari/*', 'Cookies/*.binarycookies', 'Caches/com.apple.UIStatusBar/*', 'Caches/com.apple.keyboards/images/*', 'Caches/com.apple.Safari.SafeBrowsing/*', `../tmp/${_utils.MOBILE_SAFARI_BUNDLE_ID}/*`];
    let deletePromises = [];
    for (let file of filesToDelete) {
      deletePromises.push(_support.fs.rimraf(_path.default.resolve(libraryDir, file)));
      deletePromises.push(_support.fs.rimraf(_path.default.resolve(safariLibraryDir, file)));
    }
    if (!keepPrefs) {
      deletePromises.push(_support.fs.rimraf(_path.default.resolve(safariLibraryDir, 'Preferences/*.plist')));
    }
    await _bluebird.default.all(deletePromises);
  }
  async removeApp(bundleId) {
    await this.simctl.removeApp(bundleId);
  }
  async moveBuiltInApp(appName, appPath, newAppPath) {
    await (0, _utils.safeRimRaf)(newAppPath);
    await _support.fs.copyFile(appPath, newAppPath);
    _logger.default.debug(`Copied '${appName}' to '${newAppPath}'`);
    await _support.fs.rimraf(appPath);
    _logger.default.debug(`Temporarily deleted original app at '${appPath}'`);
    return [newAppPath, appPath];
  }
  async openUrl(url) {
    const SAFARI_BOOTED_INDICATOR = 'MobileSafari[';
    const SAFARI_STARTUP_TIMEOUT = 15 * 1000;
    const EXTRA_STARTUP_TIME = 3 * 1000;
    if (await this.isRunning()) {
      await (0, _asyncbox.retry)(5000, this.simctl.openUrl.bind(this.simctl), url);
      await this.tailLogsUntil(SAFARI_BOOTED_INDICATOR, SAFARI_STARTUP_TIMEOUT);
      _logger.default.debug(`Safari started, waiting ${EXTRA_STARTUP_TIME}ms for it to fully start`);
      await _bluebird.default.delay(EXTRA_STARTUP_TIME);
      _logger.default.debug('Done waiting for Safari');
      return;
    } else {
      throw new Error('Tried to open a url, but the Simulator is not Booted');
    }
  }
  async clearCaches(...folderNames) {
    const cachesRoot = _path.default.resolve(this.getDir(), 'Library', 'Caches');
    if (!(await _support.fs.hasAccess(cachesRoot))) {
      _logger.default.debug(`Caches root at '${cachesRoot}' does not exist or is not accessible. Nothing to do there`);
      return 0;
    }
    let itemsToRemove = folderNames.length ? folderNames : await _support.fs.readdir(cachesRoot);
    itemsToRemove = itemsToRemove.map(x => _path.default.resolve(cachesRoot, x));
    if (folderNames.length) {
      itemsToRemove = await _bluebird.default.filter(itemsToRemove, x => _support.fs.hasAccess(x));
    }
    itemsToRemove = await _bluebird.default.filter(itemsToRemove, async x => (await _support.fs.stat(x)).isDirectory());
    if (!itemsToRemove.length) {
      _logger.default.debug(`No Simulator cache items for cleanup were matched in '${cachesRoot}'`);
      return 0;
    }
    _logger.default.debug(`Matched ${_support.util.pluralize('simulator cache item', itemsToRemove.length, true)} ` + `for cleanup: ${itemsToRemove}`);
    try {
      await _bluebird.default.all(itemsToRemove, x => _support.fs.rimraf(x));
    } catch (e) {
      _logger.default.warn(`Got an exception while cleaning Simulator caches: ${e.message}`);
    }
    return itemsToRemove.length;
  }
  async tailLogsUntil(bootedIndicator, timeoutMs) {
    let simLog = _path.default.resolve(this.getLogDir(), 'system.log');
    await (0, _asyncbox.retryInterval)(200, 200, async () => {
      let exists = await _support.fs.exists(simLog);
      if (!exists) {
        throw new Error(`Could not find Simulator log: '${simLog}'`);
      }
    });
    _logger.default.info(`Simulator log at '${simLog}'`);
    _logger.default.info(`Tailing simulator logs until we encounter the string "${bootedIndicator}"`);
    _logger.default.info(`We will time out after ${timeoutMs}ms`);
    try {
      await (0, _tailUntil.tailUntil)(simLog, bootedIndicator, timeoutMs);
    } catch (err) {
      _logger.default.debug('Simulator startup timed out. Continuing anyway.');
    }
  }
  async enableCalendarAccess(bundleID) {
    await this.calendar.enableCalendarAccess(bundleID);
  }
  async disableCalendarAccess(bundleID) {
    await this.calendar.disableCalendarAccess(bundleID);
  }
  async hasCalendarAccess(bundleID) {
    return await this.calendar.hasCalendarAccess(bundleID);
  }
  async _activateWindow() {
    const pid = await this.getUIClientPid();
    if (pid) {
      try {
        return await (0, _utils.activateApp)(pid);
      } catch (e) {
        _logger.default.debug(e.stderr || e.message);
      }
    }
    return `
      tell application "System Events"
        tell process "Simulator"
          set frontmost to false
          set frontmost to true
        end tell
      end tell
    `;
  }
  async executeUIClientScript(appleScript) {
    const windowActivationScript = await this._activateWindow();
    const resultScript = `${windowActivationScript ? windowActivationScript + '\n' : ''}${appleScript}`;
    _logger.default.debug(`Executing UI Apple Script on Simulator with UDID ${this.udid}: ${resultScript}`);
    return await UI_CLIENT_ACCESS_GUARD.acquire(this.simulatorApp, async () => {
      try {
        const {
          stdout
        } = await (0, _teen_process.exec)('osascript', ['-e', resultScript]);
        return stdout;
      } catch (err) {
        _logger.default.errorAndThrow(`Could not complete operation. Make sure Simulator UI is running and the parent Appium application (e. g. Appium.app or Terminal.app) ` + `is present in System Preferences > Security & Privacy > Privacy > Accessibility list. If the operation is still unsuccessful then ` + `it is not supported by this Simulator. ` + `Original error: ${err.message}`);
      }
    });
  }
  async isBiometricEnrolled() {
    const output = await this.executeUIClientScript(`
      tell application "System Events"
        tell process "Simulator"
          set dstMenuItem to menu item "Touch ID Enrolled" of menu 1 of menu bar item "Hardware" of menu bar 1
          set isChecked to (value of attribute "AXMenuItemMarkChar" of dstMenuItem) is "✓"
        end tell
      end tell
    `);
    _logger.default.debug(`Touch ID enrolled state: ${output}`);
    return _lodash.default.isString(output) && output.trim() === 'true';
  }
  async enrollBiometric(isEnabled = true) {
    await this.executeUIClientScript(`
      tell application "System Events"
        tell process "Simulator"
          set dstMenuItem to menu item "Touch ID Enrolled" of menu 1 of menu bar item "Hardware" of menu bar 1
          set isChecked to (value of attribute "AXMenuItemMarkChar" of dstMenuItem) is "✓"
          if ${isEnabled ? 'not ' : ''}isChecked then
            click dstMenuItem
          end if
        end tell
      end tell
    `);
  }
  async sendBiometricMatch(shouldMatch = true) {
    await this.executeUIClientScript(`
      tell application "System Events"
        tell process "Simulator"
          set dstMenuItem to menu item "${shouldMatch ? 'Matching' : 'Non-matching'}" of menu 1 of menu item "Simulate Finger Touch" of menu 1 of menu bar item "Hardware" of menu bar 1
          click dstMenuItem
        end tell
      end tell
    `);
  }
  async dismissDatabaseAlert(increase = true) {
    let button = increase ? 'Increase' : 'Cancel';
    _logger.default.debug(`Attempting to dismiss database alert with '${button}' button`);
    await this.executeUIClientScript(`
      tell application "System Events"
        tell process "Simulator"
          click button "${button}" of window 1
        end tell
      end tell
    `);
  }
  async backupKeychains() {
    if (!(await _support.fs.exists(this.keychainPath))) {
      return false;
    }
    const backupPath = await _support.tempDir.path({
      prefix: `keychains_backup_${Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1)}`,
      suffix: '.zip'
    });
    const zipArgs = ['-r', backupPath, `${this.keychainPath}${_path.default.sep}`];
    _logger.default.debug(`Creating keychains backup with 'zip ${zipArgs.join(' ')}' command`);
    await (0, _teen_process.exec)('zip', zipArgs);
    if (_lodash.default.isString(this._keychainsBackupPath) && (await _support.fs.exists(this._keychainsBackupPath))) {
      await _support.fs.unlink(this._keychainsBackupPath);
    }
    this._keychainsBackupPath = backupPath;
    return true;
  }
  async restoreKeychains(excludePatterns = []) {
    if (!_lodash.default.isString(this._keychainsBackupPath) || !(await _support.fs.exists(this._keychainsBackupPath))) {
      throw new Error(`The keychains backup archive does not exist. ` + `Are you sure it was created before?`);
    }
    if (_lodash.default.isString(excludePatterns)) {
      excludePatterns = excludePatterns.split(',').map(x => x.trim());
    }
    const isServerRunning = await this.isRunning();
    let plistPath;
    if (isServerRunning) {
      plistPath = _path.default.resolve(await this.getLaunchDaemonsRoot(), 'com.apple.securityd.plist');
      if (!(await _support.fs.exists(plistPath))) {
        throw new Error(`Cannot clear keychains because '${plistPath}' does not exist`);
      }
      await this.simctl.spawnProcess(['launchctl', 'unload', plistPath]);
    }
    try {
      await _support.fs.rimraf(this.keychainPath);
      await (0, _support.mkdirp)(this.keychainPath);
      const unzipArgs = ['-o', this._keychainsBackupPath, ..._lodash.default.flatMap(excludePatterns.map(x => ['-x', x])), '-d', '/'];
      _logger.default.debug(`Restoring keychains with 'unzip ${unzipArgs.join(' ')}' command`);
      await (0, _teen_process.exec)('unzip', unzipArgs);
      await _support.fs.unlink(this._keychainsBackupPath);
      this._keychainsBackupPath = null;
    } finally {
      if (isServerRunning && plistPath) {
        await this.simctl.spawnProcess(['launchctl', 'load', plistPath]);
      }
    }
    return true;
  }
  async clearKeychains() {
    const plistPath = _path.default.resolve(await this.getLaunchDaemonsRoot(), 'com.apple.securityd.plist');
    if (!(await _support.fs.exists(plistPath))) {
      throw new Error(`Cannot clear keychains because '${plistPath}' does not exist`);
    }
    await this.simctl.spawnProcess(['launchctl', 'unload', plistPath]);
    try {
      if (await _support.fs.exists(this.keychainPath)) {
        await _support.fs.rimraf(this.keychainPath);
        await (0, _support.mkdirp)(this.keychainPath);
      }
    } finally {
      await this.simctl.spawnProcess(['launchctl', 'load', plistPath]);
    }
  }
  async ps() {
    const {
      stdout
    } = await this.simctl.spawnProcess(['launchctl', 'print', 'system']);
    const servicesMatch = /^\s*services\s*=\s*{([^}]+)/m.exec(stdout);
    if (!servicesMatch) {
      _logger.default.debug(stdout);
      throw new Error(`The list of active processes cannot be retrieved`);
    }
    const result = [];
    const pattern = /^\s*(\d+)\s+[\d-]+\s+([\w\-.]+:)?([\w\-.]+)/gm;
    let match;
    while (match = pattern.exec(servicesMatch[1])) {
      result.push({
        pid: parseInt(match[1], 10),
        group: _lodash.default.trimEnd(match[2], ':') || null,
        name: match[3]
      });
    }
    return result;
  }
  async setPermission(bundleId, permission, value) {
    await this.setPermissions(bundleId, {
      [permission]: value
    });
  }
  async setPermissions(bundleId, permissionsMapping) {
    _logger.default.debug(`Setting access for '${bundleId}': ` + JSON.stringify(permissionsMapping, null, 2));
    await this.permissions.setAccess(bundleId, permissionsMapping);
  }
  async getPermission(bundleId, serviceName) {
    const result = await this.permissions.getAccess(bundleId, serviceName);
    _logger.default.debug(`Got ${serviceName} access status for '${bundleId}': ${result}`);
    return result;
  }
  async addCertificate(payload) {
    if (await (0, _utils.hasSSLCert)(payload, this.udid)) {
      _logger.default.info(`SSL certificate '${_lodash.default.truncate(payload, {
        length: 20
      })}' already installed`);
      return false;
    }
    _logger.default.info(`Installing SSL root certificate '${_lodash.default.truncate(payload, {
      length: 20
    })}'`);
    await (0, _utils.installSSLCert)(payload, this.udid);
    return true;
  }
  async pushNotification() {
    throw new Error(`Xcode SDK '${this.xcodeVersion}' is too old to push notifications`);
  }
  async getLaunchDaemonsRoot() {
    const devRoot = await (0, _utils.getDeveloperRoot)();
    return _path.default.resolve(devRoot, 'Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/LaunchDaemons');
  }
  static async _getDeviceStringPlatformVersion(platformVersion) {
    let reqVersion = platformVersion;
    if (!reqVersion) {
      reqVersion = await _appiumXcode.default.getMaxIOSSDK();
      _logger.default.warn(`No platform version set. Using max SDK version: ${reqVersion}`);
      if (!_lodash.default.isString(reqVersion)) {
        reqVersion = reqVersion % 1 ? String(reqVersion) : `${reqVersion}.0`;
      }
    }
    return reqVersion;
  }
  static async _getDeviceStringVersionString(platformVersion) {
    let reqVersion = await this._getDeviceStringPlatformVersion(platformVersion);
    return `(${reqVersion} Simulator)`;
  }
  static _getDeviceStringConfigFix() {
    return {
      'iPad Simulator (7.1 Simulator)': 'iPad 2 (7.1 Simulator)',
      'iPad Simulator (8.0 Simulator)': 'iPad 2 (8.0 Simulator)',
      'iPad Simulator (8.1 Simulator)': 'iPad 2 (8.1 Simulator)',
      'iPad Simulator (8.2 Simulator)': 'iPad 2 (8.2 Simulator)',
      'iPad Simulator (8.3 Simulator)': 'iPad 2 (8.3 Simulator)',
      'iPad Simulator (8.4 Simulator)': 'iPad 2 (8.4 Simulator)',
      'iPhone Simulator (7.1 Simulator)': 'iPhone 5s (7.1 Simulator)',
      'iPhone Simulator (8.4 Simulator)': 'iPhone 6 (8.4 Simulator)',
      'iPhone Simulator (8.3 Simulator)': 'iPhone 6 (8.3 Simulator)',
      'iPhone Simulator (8.2 Simulator)': 'iPhone 6 (8.2 Simulator)',
      'iPhone Simulator (8.1 Simulator)': 'iPhone 6 (8.1 Simulator)',
      'iPhone Simulator (8.0 Simulator)': 'iPhone 6 (8.0 Simulator)'
    };
  }
  static async getDeviceString(opts) {
    opts = Object.assign({}, {
      deviceName: null,
      platformVersion: null,
      forceIphone: false,
      forceIpad: false
    }, opts);
    let logOpts = {
      deviceName: opts.deviceName,
      platformVersion: opts.platformVersion,
      forceIphone: opts.forceIphone,
      forceIpad: opts.forceIpad
    };
    _logger.default.debug(`Getting device string from options: ${JSON.stringify(logOpts)}`);
    if ((opts.deviceName || '')[0] === '=') {
      return opts.deviceName.substring(1);
    }
    let isiPhone = !!opts.forceIphone || !opts.forceIpad;
    if (opts.deviceName) {
      let device = opts.deviceName.toLowerCase();
      if (device.indexOf('iphone') !== -1) {
        isiPhone = true;
      } else if (device.indexOf('ipad') !== -1) {
        isiPhone = false;
      }
    }
    let iosDeviceString = opts.deviceName || (isiPhone ? 'iPhone Simulator' : 'iPad Simulator');
    if (/^(iPhone|iPad)$/.test(iosDeviceString)) {
      iosDeviceString += ' Simulator';
    }
    if (/[^(iPhone|iPad)] Simulator/.test(iosDeviceString)) {
      iosDeviceString = iosDeviceString.replace(' Simulator', '');
    }
    iosDeviceString += ` ${await this._getDeviceStringVersionString(opts.platformVersion)}`;
    let CONFIG_FIX = this._getDeviceStringConfigFix();
    let configFix = CONFIG_FIX;
    if (configFix[iosDeviceString]) {
      iosDeviceString = configFix[iosDeviceString];
      _logger.default.debug(`Fixing device. Changed from '${opts.deviceName}' ` + `to '${iosDeviceString}'`);
    }
    _logger.default.debug(`Final device string is '${iosDeviceString}'`);
    return iosDeviceString;
  }
  async getWebInspectorSocket() {
    return null;
  }
}
exports.SimulatorXcode6 = SimulatorXcode6;
for (let [cmd, fn] of _lodash.default.toPairs(_index.default)) {
  SimulatorXcode6.prototype[cmd] = fn;
}
var _default = SimulatorXcode6;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,